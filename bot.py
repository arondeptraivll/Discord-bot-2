import discord
from discord import app_commands, ui
import os
import requests
import time
import threading
import asyncio
from flask import Flask
import json
import uuid
from datetime import datetime, timedelta, timezone

# --- C·∫§U H√åNH BOT V√Ä C√ÅC H·∫∞NG S·ªê ---
TOKEN = os.getenv('DISCORD_TOKEN')
if not TOKEN: print("L·ªñI: Vui l√≤ng thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng DISCORD_TOKEN."); exit()

ADMIN_USER_ID = 1380084257631895725 # ID c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
KEYS_FILE = 'keys.json'
ALLOWED_CHANNEL_ID = 1383289311289544824 

intents = discord.Intents.default()
client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)

# --- QU·∫¢N L√ù KEY (JSON) ---
def load_keys():
    try:
        with open(KEYS_FILE, 'r') as f: return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError): return {}
def save_keys(keys_data):
    with open(KEYS_FILE, 'w') as f: json.dump(keys_data, f, indent=4)

# --- WEB SERVER CHO UPTIME ROBOT ---
app = Flask(__name__)
@app.route('/')
def home(): return "Bot is alive and ready for commands!"
def run_flask(): app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 10000)))

# --- LOGIC G·ª¨I NGL ---
def start_ngl_spam(username: str, message: str, count: int, progress_callback: callable):
    sent_count, failed_count = 0, 0
    with requests.Session() as session:
        headers = {'Host': 'ngl.link', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36', 'referer': f'https://ngl.link/{username}'}
        while sent_count + failed_count < count:
            data = {'username': username, 'question': message, 'deviceId': '0'}
            try:
                response = session.post('https://ngl.link/api/submit', headers=headers, data=data, timeout=10)
                if response.status_code == 200: sent_count += 1
                else:
                    failed_count += 1
                    if failed_count % 10 == 0: time.sleep(5)
            except requests.exceptions.RequestException: failed_count += 1; time.sleep(2)
            progress_callback(sent_count, failed_count, count)
    if count != float('inf'): progress_callback(sent_count, failed_count, count, finished=True)

# --- GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG ---

class NGLConfigModal(ui.Modal, title='üöÄ C·∫•u h√¨nh NGL Spamer'):
    username_input = ui.TextInput(label='üë§ T√™n ng∆∞·ªùi d√πng NGL', placeholder='v√≠ d·ª•: elonmusk', required=True)
    message_input = ui.TextInput(label='üí¨ N·ªôi dung tin nh·∫Øn', placeholder='N·ªôi dung b·∫°n mu·ªën g·ª≠i...', required=True, style=discord.TextStyle.long, max_length=250)
    count_input = ui.TextInput(label='üî¢ S·ªë l·∫ßn g·ª≠i (g√µ "inf" ƒë·ªÉ ch·∫°y v√¥ h·∫°n)', placeholder='v√≠ d·ª•: 500 ho·∫∑c inf', required=True, max_length=10)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True, thinking=True)
        ngl_username, message, count_str = self.username_input.value, self.message_input.value, self.count_input.value.strip().lower()
        count = float('inf') if count_str == 'inf' else (int(count_str) if count_str.isdigit() and int(count_str) > 0 else 0)
        if count == 0 and count_str != 'inf':
            await interaction.followup.send("‚ùå L·ªói: S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá.", ephemeral=True); return
        async def update_progress_embed(sent, failed, total, finished=False):
            is_infinite, color = (total == float('inf')), discord.Color.green() if finished else discord.Color.blue()
            title = "‚úÖ T√°c v·ª• Ho√†n Th√†nh!" if finished else "üèÉ ƒêang th·ª±c thi..."
            embed = discord.Embed(title=title, description=f"ƒêang g·ª≠i tin nh·∫Øn t·ªõi **{ngl_username}**.", color=color)
            if is_infinite:
                embed.description += " (Ch·∫ø ƒë·ªô v√¥ h·∫°n)"
                embed.add_field(name="Tr·∫°ng th√°i", value="`‚ôæÔ∏è ƒêang ch·∫°y kh√¥ng ng·ª´ng...`", inline=False)
                embed.add_field(name="‚úÖ ƒê√£ g·ª≠i", value=f"{sent}", inline=True); embed.add_field(name="‚ùå Th·∫•t b·∫°i", value=f"{failed}", inline=True)
            else:
                progress = (sent + failed) / total
                progress_bar = '‚ñà' * int(progress * 20) + '‚îÄ' * (20 - int(progress * 20))
                embed.add_field(name="Ti·∫øn tr√¨nh", value=f"`[{progress_bar}]` {int(progress * 100)}%", inline=False)
                embed.add_field(name="‚úÖ Th√†nh c√¥ng", value=f"{sent}/{total}", inline=True); embed.add_field(name="‚ùå Th·∫•t b·∫°i", value=f"{failed}", inline=True)
            embed.set_footer(text=f"Y√™u c·∫ßu b·ªüi {interaction.user.display_name}")
            await interaction.edit_original_response(content=None, embed=embed)
        def cb(sent, failed, total, finished=False): asyncio.run_coroutine_threadsafe(update_progress_embed(sent, failed, total, finished), client.loop)
        threading.Thread(target=start_ngl_spam, args=(ngl_username, message, count, cb)).start()

class ConfigView(ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    @ui.button(label='üöÄ M·ªü C·∫•u h√¨nh Spam', style=discord.ButtonStyle.primary, custom_id='open_config_modal_button')
    async def open_config_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(NGLConfigModal())

class KeyEntryModal(ui.Modal, title='üõ°Ô∏è X√°c th·ª±c Gi·∫•y ph√©p'):
    key_input = ui.TextInput(label='üîë M√£ k√≠ch ho·∫°t', placeholder='D√°n m√£ k√≠ch ho·∫°t c·ªßa b·∫°n v√†o ƒë√¢y...', required=True)
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        key = self.key_input.value.strip().upper()
        keys = load_keys()
        if key not in keys:
            embed = discord.Embed(title="‚ùå X√°c th·ª±c Th·∫•t b·∫°i", description="M√£ k√≠ch ho·∫°t kh√¥ng t·ªìn t·∫°i.", color=discord.Color.red())
            await interaction.followup.send(embed=embed, ephemeral=True); return
        key_data, now = keys[key], datetime.now(timezone.utc)
        expires_at = datetime.fromisoformat(key_data['expires_at'])
        if now > expires_at:
            embed = discord.Embed(title="‚åõ M√£ H·∫øt H·∫°n", description="M√£ ƒë√£ h·∫øt h·∫°n.", color=discord.Color.orange())
            await interaction.followup.send(embed=embed, ephemeral=True)
            del keys[key]; save_keys(keys); return
        success_embed = discord.Embed(title="‚úÖ X√°c th·ª±c Th√†nh c√¥ng!", description="Gi·ªù b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu c·∫•u h√¨nh t√°c v·ª•.", color=discord.Color.brand_green())
        await interaction.message.edit(embed=success_embed, view=ConfigView())

class StartView(ui.View):
    def __init__(self): super().__init__(timeout=None)
    @ui.button(label='B·∫Øt ƒë·∫ßu', style=discord.ButtonStyle.success, emoji='üöÄ', custom_id='start_key_entry_button')
    async def start_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(KeyEntryModal())

# --- L·ªÜNH DISCORD ---

@tree.command(name="start2", description="B·∫Øt ƒë·∫ßu t√°c v·ª• NGL v·ªõi giao di·ªán c·∫•u h√¨nh.")
async def start2_command(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    if interaction.channel.id != ALLOWED_CHANNEL_ID:
        await interaction.followup.send(f"‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong k√™nh <#{ALLOWED_CHANNEL_ID}>."); return
    embed = discord.Embed(title="üåü NGL Spamer - K√≠ch ho·∫°t b·∫±ng Gi·∫•y ph√©p", description="> ƒê·ªÉ ti·∫øp t·ª•c, b·∫°n c·∫ßn c√≥ m·ªôt m√£ k√≠ch ho·∫°t (license key) h·ª£p l·ªá. Nh·∫•n n√∫t **B·∫Øt ƒë·∫ßu** b√™n d∆∞·ªõi ƒë·ªÉ nh·∫≠p m√£ c·ªßa b·∫°n.", color=discord.Color.purple())
    embed.add_field(name="L√†m th·∫ø n√†o ƒë·ªÉ c√≥ m√£?", value="Vui l√≤ng li√™n h·ªá v·ªõi **Admin** c·ªßa server ƒë·ªÉ nh·∫≠n m√£ k√≠ch ho·∫°t.", inline=False)
    embed.set_thumbnail(url="https://i.imgur.com/3Q3NSIa.png")
    embed.set_footer(text="Bot by Gemlogin Tool - Y√™u c·∫ßu m√£ ƒë·ªÉ s·ª≠ d·ª•ng")
    await interaction.followup.send(embed=embed, view=StartView())

@tree.command(name="nglkey", description="[ADMIN] T·∫°o m·ªôt key k√≠ch ho·∫°t m·ªõi.")
@app_commands.describe(duration="Th·ªùi h·∫°n key (v√≠ d·ª•: 7d, 24h, 30m). M·∫∑c ƒë·ªãnh l√† 7 ng√†y.")
async def generate_key(interaction: discord.Interaction, duration: str = "7d"):
    if interaction.user.id != ADMIN_USER_ID:
        await interaction.response.send_message(embed=discord.Embed(title="üö´ Truy c·∫≠p B·ªã t·ª´ ch·ªëi", description="B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", color=discord.Color.dark_red()), ephemeral=True); return
    
    # ### S·ª¨A L·ªñI TIMEOUT ###
    # Defer t∆∞∆°ng t√°c NGAY L·∫¨P T·ª®C ƒë·ªÉ c√≥ th·ªùi gian x·ª≠ l√Ω c√°c t√°c v·ª• ch·∫≠m b√™n d∆∞·ªõi
    await interaction.response.defer(ephemeral=True)
    
    try:
        value, unit = int(duration[:-1]), duration[-1].lower()
        if unit == 'd': delta = timedelta(days=value)
        elif unit == 'h': delta = timedelta(hours=value)
        elif unit == 'm': delta = timedelta(minutes=value)
        else: raise ValueError
    except (ValueError, IndexError):
        await interaction.followup.send("‚ùå ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: `7d`, `24h`.", ephemeral=True); return
    
    keys = load_keys()
    new_key = str(uuid.uuid4()).upper()
    expires_at = datetime.now(timezone.utc) + delta
    keys[new_key] = {'created_at': (expires_at - delta).isoformat(),'expires_at': expires_at.isoformat(),'created_by': interaction.user.id}
    save_keys(keys)
    
    embed = discord.Embed(title="üîë ƒê√£ t·∫°o Key th√†nh c√¥ng!", description="H√£y giao m√£ n√†y cho ng∆∞·ªùi d√πng.", color=discord.Color.brand_green())
    embed.add_field(name="M√£ K√≠ch Ho·∫°t", value=f"```\n{new_key}\n```", inline=False)
    embed.add_field(name="üóìÔ∏è C√≥ hi·ªáu l·ª±c ƒë·∫øn", value=f"<t:{int(expires_at.timestamp())}:F>", inline=True)
    embed.add_field(name="‚è≥ Th·ªùi h·∫°n", value=f"{value} { {'d': 'ng√†y', 'h': 'gi·ªù', 'm': 'ph√∫t'}[unit] }", inline=True)

    # ### S·ª¨A L·ªñI TIMEOUT ###
    # D√πng followup.send() ƒë·ªÉ g·ª≠i tin nh·∫Øn sau khi ƒë√£ defer
    await interaction.followup.send(embed=embed, ephemeral=True)

@client.event
async def on_ready():
    client.add_view(StartView())
    client.add_view(ConfigView())
    await tree.sync()
    print(f'Logged in as {client.user} (ID: {client.user.id})')
    print('Bot is ready and slash commands are synced.')
    threading.Thread(target=run_flask, daemon=True).start()

if __name__ == "__main__":
    client.run(TOKEN)
